import type { ReadmeTemplate } from "../interfaces.js";

export default (r: ReadmeTemplate): string => {
  return `
<!--
  This file is automatically generated when building the project. Do not make
  changes to this file. Update the template generator/templates/readme.ts instead.
-->

# JS Jujulib

This project provides a JavaScript API client library for interacting with the Juju
WebSocket API.

- [Getting Started](#getting-started)
- [Client API Reference](#client-api-reference)
- [Examples](#examples)
- [Facade API Reference](#facade-api-reference)
- [Library Maintenance](#library-maintenance)
  - [Updating Library Facades](#updating-library-facades)
  - [Releasing to NPM](#releasing-to-npm)

## Getting Started

To access the Juju API, a connection must be made to either a Juju
controller or a Juju model.

\`\`\`javascript
import { connect } from "@canonical/jujulib";

import Client from "@canonical/jujulib/dist/api/facades/client";
import ModelManager from "@canonical/jujulib/dist/api/facades/model-manager";

// Nodejs
// import WebSocket from "ws";

const serverURL = "ws://localhost:17070";
const credentials = {
  username: "admin",
  password: "test",
};

// Connect to the controller
const controller = await connect(\`\${serverURL}/api\`, {
  facades: [ModelManager],
  wsclass: WebSocket,
});
let conn = await controller.login(credentials);

// Get the list of models
const modelManager = conn.facades.modelManager;
const response = await modelManager.listModels({
  tag: conn.info.user.identity,
});
const models = response["user-models"];
console.log("models:", models);

// Close the connection to the controller
conn.transport.close();

// Login to each model
for (const modelDetails of models) {
  const model = await connect(
    \`\${serverURL}/model/\${modelDetails.model.uuid}/api\`,
    {
      facades: [Client],
      wsclass: WebSocket,
    }
  );
  conn = await model.login(credentials);

  // Get the details of the model
  const client = conn.facades.client;
  console.log("model details:", await client.fullStatus());

  // Close the connection to the model
  conn.transport.close();
}
\`\`\`

In the code above, a connection is established to the provided controller API URL where the client declares interest in using the facade \`ModelManager\`, and we establish a new connection with each model API to get the full details using the facade \`Client\`.

**Note:** Facades are used to supported different versions of juju, when multiple versions of the same facade are supported by the juju API (like the two client versions in the example), the most recent version supported by the server is made available to the client.

The \`connect\` method returns a \`juju\` object which is used to log into the controller or model by providing a user/pass credentials or [macaroons](https://github.com/juju/bakeryjs). See the [various examples](#examples).

## Client API Reference

Visit the [full API documentation](https://juju.github.io/js-libjuju/) for detailed information on the Client API.

## Examples

We have a number of examples showing how to perform a few common tasks. Those can be found in the \`examples\` folder.

${r.exampleList
  .map((e) => {
    return `- [${e.name}](${e.path})`;
  })
  .join("\n")}

## Facade API Reference

Detailed Facade documentation is available as part of the [full API documentation](https://juju.github.io/js-libjuju/) or you can visit the facade source directly using the following links:

|Facade|Versions|
|-|-|
${Object.keys(r.facadeList)
  .map((facadeName) => {
    const versionsList = r.facadeList[facadeName]
      .sort((a, b) =>
        (a.name.split(".").pop() || "").localeCompare(
          b.name.split(".").pop() || ""
        )
      )
      .map((f) => `<li>[${f.name}](${f.path})</li>`)
      .join("");
    return `|${facadeName}|<ul>${versionsList}</ul>|`;
  })
  .join("\n")}

## Library Maintenance

### Updating Library Facades

The Juju facade API files are generated from a supplied Juju schema.

To generate this schema you will need to clone the [Juju repository](https://github.com/juju/juju/) and then run \`make rebuild-schema\` or \`go run github.com/juju/juju/generate/schemagen -admin-facades --facade-group=client,jimm ./apiserver/facades/schema.json\` to generate a schema file that contains the publicly available facades as well as the set of facades for JAAS. Other \`--facade-group\` options are \`latest\` and \`all\`.

After generating a new schema run \`yarn store-schema ../path/to/juju\` which will store the updated schema and necessary meta data in this project.

To update the facades, run \`yarn generate-facades\` on this project. This will generate the facades using the locally stored schema, sha, and version the schema was generated from.

Finally, update \`CLIENT_VERSION\` in \`api/client.ts\` with the highest support version.

### Releasing to NPM

- Update the version number in \`package.json\`, respecting semver, create a PR
  and land it.
- Build package with \`yarn run build\`.
- Upgrade the [Juju Dashboard](https://github.com/canonical-web-and-design/jaas-dashboard) to this version using \`yarn link\` and ensure that everything works as expected.
- Create a [new release](https://github.com/juju/js-libjuju/releases/new) on
  GitHub, setting the tag and title to the version number from above and include
  any relevant changes in the release notes (use the 'Generate release notes' to
  show changes since the last release and create a full changelog link, but
  rewrite the changes to help them make sense to consumers of the library).
- Clone a fresh copy of the repository: \`git clone git@github.com:juju/js-libjuju.git\`.
- Install the dependencies and build the package with \`yarn install && yarn run build\`.
- Now you can publish to NPM with \`yarn publish\`.
`;
};
